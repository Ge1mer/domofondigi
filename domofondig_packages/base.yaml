esphome:
  name: $mdns_name
  platform: ESP8266
  board: $board
  comment: "https://github.com/Anonym-tsk/smart-domofon/tree/master/ge1mer"
  esp8266_restore_from_flash: true
  on_boot:
    priority: -100
    then:
      - script.execute: state_ready
      - script.execute: state_no_call

wifi:
  ssid: $wifi_ssid
  password: $wifi_password
  fast_connect: on
  ap:
    ssid: $ap_ssid
    password: $ap_password

captive_portal:

web_server:

logger:
  baud_rate: 0
  logs:
    light: INFO

ota:
  password: $ota_password

globals:
  - id: mode_auto_open
    type: bool
    restore_value: yes
    initial_value: 'false'
  - id: mode_auto_open_once
    type: bool
    restore_value: yes
    initial_value: 'false'
  - id: mode_auto_reject
    type: bool
    restore_value: yes
    initial_value: 'false'
  - id: mode_mute
    type: bool
    restore_value: yes
    initial_value: 'false'
  - id: mode_mute_once
    type: bool
    restore_value: yes
    initial_value: 'false'

sensor:
  - platform: template
    name: "${board_name} Heap Size"
    lambda: "return ESP.getFreeHeap();"
    update_interval: 20s
    unit_of_measurement: bytes
    accuracy_decimals: 0
  - platform: uptime
    internal: true
    id: device_uptime

text_sensor:

  - platform: template
    name: "${board_name} Uptime"
    lambda: |-
      uint32_t uptime = (id(device_uptime).state);
      int minutes = (uptime % 3600) / 60;
      int hours = (uptime % 86400) / 3600;
      int days = uptime / 86400;
      if (days > 0) {
        return { (String(days) + " д." + String(hours) + " ч." + String(minutes) + " мин.").c_str() };
      }
      if (hours > 0) {
        return { (String(hours) + " ч. " + String(minutes) + " мин.").c_str() };
      } else {
        return { (String(minutes) + " мин.").c_str() };
      }
    update_interval: 60s
    icon: mdi:clock-start    